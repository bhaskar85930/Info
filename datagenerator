import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;

/**
 * Assumes mapr installed in /opt/mapr
 * 
 */
public class TransactionDataGenerator {
	private static final String DELIM = "|";
	private List<String> cardNumbers = new ArrayList<>();
	private Random random = new Random();

	public TransactionDataGenerator(FileSystem fs, Path rfilepath, Path wfilepath, int multivalue) throws Exception {

		System.out.println("reading file: " + rfilepath);
		BufferedReader br = new BufferedReader(new InputStreamReader(fs.open(rfilepath)));
		String str;
		// read lines till the end of the stream
		while ((str = br.readLine()) != null) {
			String[] tokens = str.split("\\|");
			cardNumbers.add(tokens[0]);
		}
		int cardCount = cardNumbers.size();
		System.out.println(cardCount);
		// Writer writer = new BufferedWriter(new
		// OutputStreamWriter(wfilepath));
		Charset UTF8 = Charset.forName("utf-8");

		FSDataOutputStream os = fs.create(wfilepath, true, // overwrite
				512, // buffersize
				(short) 1, // replication
				(long) (512 * 1024 * 1024) // chunksize
		);
		OutputStreamWriter osw = new OutputStreamWriter(os, UTF8);
		PrintWriter writer = new PrintWriter(osw);

		// int multiplier = 100000;
		StringBuilder buf = null;
		int counter = 1;
		int counter1 = 1;
		int counter2 = 1;
		int counter3 = 1;
		try {
			for (int i = 0; i < cardCount; i++) {
				System.out.println("card: " + String.valueOf(i + 1) + " " + cardNumbers.get(i));
				for (int j = 0; j < multivalue; j++) {
					buf = new StringBuilder();
					buf.append(String.valueOf(counter++));
					buf.append(DELIM);
					buf.append(Integer.toHexString(counter1++));
					buf.append(DELIM);
					buf.append(cardNumbers.get(i));
					buf.append(DELIM);
					buf.append(String.valueOf(counter2++));
					buf.append(cardNumbers.get(i));
					buf.append(DELIM);
					buf.append(Integer.toHexString(counter3++));
					buf.append(cardNumbers.get(i));
					buf.append(DELIM);
					buf.append(String.valueOf(System.nanoTime()));
					buf.append(DELIM);
					buf.append(String.valueOf(System.nanoTime()));
					buf.append(DELIM);
					buf.append(String.valueOf(System.nanoTime()));
					buf.append(DELIM);
					buf.append(String.valueOf(System.nanoTime()));
					buf.append(DELIM);
					String dollars = String.valueOf(random.nextInt(999999));
					String cents = String.valueOf(random.nextInt(99));
					String amount = dollars + "." + cents;
					buf.append(amount);
					buf.append(DELIM);
					buf.append(dollars);
					buf.append(DELIM);
					buf.append(cents);
					buf.append(DELIM);


					buf.append('\n');
					writer.write(buf.toString());
					// writer.write(buf.toString());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				writer.flush();
				writer.close();
				br.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	/**
	 * Please provide inputfile path as args[0] Please provide outpurfile path
	 * as args[1]
	 */

	public static void main(String args[]) throws Exception {

		if (args.length < 3) {
			System.out.println("Please provide args[0] : Input File Path");
			System.out.println("Please provide args[1] : Output File Path");
			System.out.println("Please provide args[2] : Multiplier Value");
			return;
		}
		String input_dirname = args[0];
		String output_dirname = args[1];
		String multiplier = args[2];
		int multivalue = Integer.parseInt(multiplier);
		Configuration conf = new Configuration();
		FileSystem fs = FileSystem.get(conf);
		Path dirpath = new Path(output_dirname + "/dir");

		// Create the directory using mkdir command
		boolean res = fs.mkdirs(dirpath);
		if (!res) {
			System.out.println("mkdir failed, path: " + dirpath);
			return;
		}
		System.out.println("mkdir( " + dirpath + ") created successfully");
		Path rfilepath = new Path(input_dirname + "/banking_card_100K.csv");
		Path wfilepath = new Path(dirpath + "/card_transaction_with_hexString_rowkey_1.csv");

		new TransactionDataGenerator(fs, rfilepath, wfilepath, multivalue);
		System.out.println("Generating Transaction Data completed successfully");
	}

}
