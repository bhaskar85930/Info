import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class HbaseBulkLoadMapper extends Mapper<LongWritable, Text, ImmutableBytesWritable, KeyValue> {
    private String hbaseTable;	
    private String dataSeperator;
    private String columnFamily1;
    private String columnFamily2;

    private ImmutableBytesWritable hbaseTableName;
    private int counter =10;

    public void setup(Context context) {
        Configuration configuration = context.getConfiguration();		
        hbaseTable = configuration.get("hbase.table.name");		
        dataSeperator = configuration.get("data.seperator");		
        columnFamily1 = configuration.get("COLUMN_FAMILY_1");		
        columnFamily2 = configuration.get("COLUMN_FAMILY_2");
        System.out.println("Reducer memory:"+configuration.get("mapreduce.reduce.java.opts"));
        System.out.println("Reducer memory:"+configuration.get("mapreduce.reduce.memory.mb"));
        
        hbaseTableName = new ImmutableBytesWritable(Bytes.toBytes(hbaseTable));		
    }

    public void map(LongWritable key, Text value, Context context)throws IOException,InterruptedException {
        try {		
            String[] values = value.toString().split(dataSeperator);
            String rowKey = String.valueOf(counter++);	
            KeyValue kv=new KeyValue(Bytes.toBytes(rowKey),Bytes.toBytes(columnFamily1),Bytes.toBytes("first_name"), Bytes.toBytes(values[0]));
            context.write(hbaseTableName, kv);
            kv=new KeyValue(Bytes.toBytes(rowKey),Bytes.toBytes(columnFamily2),Bytes.toBytes("last_name"), Bytes.toBytes(values[1]));
            
            context.write(hbaseTableName, kv);
             
                } 
        catch(Exception exception) {			
            exception.printStackTrace();			
        }
        
       
    }
}
